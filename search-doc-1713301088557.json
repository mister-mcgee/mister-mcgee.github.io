{"searchDocs":[{"title":"Binary","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Binary","content":"Binary Binary - Binary comes from the Latin bini-, meaning having two parts. In programming, binary often refers to the base-2 number system which consists of only the digits zero and one.","keywords":"","version":"Next"},{"title":"Byte","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Byte","content":"Byte Byte - A byte consists of eight bits and is the smallest addressable unit of memory in a modern computer.","keywords":"","version":"Next"},{"title":"Concurrent","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Concurrent","content":"Concurrent Parallel / Concurrent - In programming, parallel refers to the processing of data simultaneously, meaning at the same time.","keywords":"","version":"Next"},{"title":"Bit","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Bit","content":"Bit Bit - A bit is a binary digit, which is the smallest unit of information. A bit may only occupy one of two states at a time. A bit can either be zero or one, low or high, off or on, false or true respectively.","keywords":"","version":"Next"},{"title":"CPU","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/CPU","content":"CPU CPU - A CPU or central processing unit is hardware optimized to execute instructions in series","keywords":"","version":"Next"},{"title":"GPU","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/GPU","content":"GPU GPU - A GPU or graphics processing unit is hardware optimized to execute instructions in parallel.","keywords":"","version":"Next"},{"title":"Grammar","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Grammar","content":"Grammar Grammar - In programming, grammar refers to how the symbols of a programming language are arranged.","keywords":"","version":"Next"},{"title":"Decimal","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Decimal","content":"Decimal Decimal - Decimal comes from the Latin deci-, meaning tenth. Decimal refers to the base-10 number system which consists of the digits zero through nine.","keywords":"","version":"Next"},{"title":"Hardware","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Hardware","content":"Hardware Hardware - Hardware are the physical components that comprise a computer.","keywords":"","version":"Next"},{"title":"HDD","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/HDD","content":"HDD HDD - An HDD or hard disk drive is a kind of persistent storage device that stores information on a spinning disk using a magnetic head to Because the disk has to be physically moved to read or write to certain locations, an HDD is not a form of random access storage.","keywords":"","version":"Next"},{"title":"Memory","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Memory","content":"Memory Memory - Memory is a term describing how computers store information, usually in the form of bits and bytes.","keywords":"","version":"Next"},{"title":"Hexadecimal","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Hexadecimal","content":"Hexadecimal Hexadecimal - Hexadecimal comes from the Latin hex- meaning six and deci- meaning tenth. Hexadecimal refers to the base-16 number system which consists of the numeric digits zero through 9 and an additional six alphabetic digits; A, B, C, D, E, F.","keywords":"","version":"Next"},{"title":"Memory Address","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Memory Address","content":"Memory Address Memory Address - A memory address is a binary number (usually 32 bits wide or 64 bits wide), which describes the physical location of a chunk in memory. It is less efficient to address individual bits so a computer's memory is broken into chunks called bytes where each byte has its own address.","keywords":"","version":"Next"},{"title":"Octal","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Octal","content":"Octal Octal - Octal comes from the Latin oct-, meaning eight. Octal refers to the base-8 number system which consists of the digits zero through seven.","keywords":"","version":"Next"},{"title":"Persistent Storage","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Persistent Storage","content":"Persistent Storage Persistent Storage - Persistent storage is a kind of memory that does not require active power to store information, meaning that persistent memory can survive a power cycle. Persistent memory is usually slower to read than volatile memory.","keywords":"","version":"Next"},{"title":"Parallel","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Parallel","content":"Parallel Parallel / Concurrent - In programming, parallel refers to the processing of data simultaneously, meaning at the same time.","keywords":"","version":"Next"},{"title":"ODD","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/ODD","content":"ODD ODD - An ODD or optical disk drive is a kind of persistent storage device that stores information on a spinning disk using a laser. Because the disk has to be physically moved to to read or write to certain locations, an ODD is not a form of random access storage.","keywords":"","version":"Next"},{"title":"Programming Language","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Programming Language","content":"Programming Language Programming Language - A programming language is a set of grammar and syntax used to write programs.","keywords":"","version":"Next"},{"title":"Program","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Program","content":"Program Program - A program is a sequence of instructions written to be executed by a computer.","keywords":"","version":"Next"},{"title":"Random Access","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Random Access","content":"Random Access Random Access - Random access means that read operations take the same time regardless of their location in memory.","keywords":"","version":"Next"},{"title":"RAM","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/RAM","content":"RAM RAM - RAM or random access memory is a kind of volatile memory that stores information via electric switches. Because there are no moving parts or magnetic switches, RAM is incredibly fast.","keywords":"","version":"Next"},{"title":"Read","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Read","content":"Read Read - In programming, reading refers to the process of copying a value from memory to the CPU.","keywords":"","version":"Next"},{"title":"Serial","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Serial","content":"Serial Series / Serial - In programming, serial refers to the processing of data sequentially, meaning one at a time.","keywords":"","version":"Next"},{"title":"Series","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Series","content":"Series Series / Serial - In programming, serial refers to the processing of data sequentially, meaning one at a time.","keywords":"","version":"Next"},{"title":"Software","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Software","content":"Software Software - Software are the programs that a computer executes.","keywords":"","version":"Next"},{"title":"SSD","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/SSD","content":"SSD SSD - An SSD or solid state drive is a kind of persistent storage device that stores information via magnetic switches. Because there are no moving parts, an SSD is a form of random access storage.","keywords":"","version":"Next"},{"title":"Syntax","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Syntax","content":"Syntax Syntax - In programming, syntax refers to the symbols that comprise a programming language. A syntax error occurs when a symbol is unrecognized or used incorrectly.","keywords":"","version":"Next"},{"title":"Volatile Memory","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Volatile Memory","content":"Volatile Memory Volatile Memory - Volatile memory is a kind of memory that requires active power to store information, meaning that volatile memory cannot survive a power cycle. Volatile memory is typically faster to read than persistent storage.","keywords":"","version":"Next"},{"title":"Setup Python","type":0,"sectionRef":"#","url":"/docs/Resources/How-To/Getting Started with Python","content":"Setup Python","keywords":"","version":"Next"},{"title":"Comments","type":0,"sectionRef":"#","url":"/docs/Resources/Python/Comments","content":"Comments Many programming languages support the use of comments which are a way to include arbitrary text in your code. Comments are often used to leave notes in your code for your future self or other programmers. In Python, adding a comment looks like this - # Everything on this line after the &quot;#&quot; is a comment! Everything on a line after a # is considered a comment by the Python interpreter and will be ignored when running your code.","keywords":"","version":"Next"},{"title":"Setup Visual Studio Code","type":0,"sectionRef":"#","url":"/docs/Resources/How-To/Getting Started with Visual Studio Code","content":"Setup Visual Studio Code","keywords":"","version":"Next"},{"title":"Write","type":0,"sectionRef":"#","url":"/docs/Resources/Definitions/Write","content":"Write Write - In programming, writing refers to the process of copying a value from the CPU to memory.","keywords":"","version":"Next"},{"title":"Data Types","type":0,"sectionRef":"#","url":"/docs/Resources/Python/Data Types","content":"Data Types In a modern computer all data exists as a simple binary sequence which is meaningless without context. This is why data types are useful. Data types describe how certain data should be handled by your program. Different values can have the same binary representation yet mean different things depending on their data type. A good example of this is the 32-bit hexadecimal value 0x3f800000 which represents the integer 1065353216, meanwhile that same value represents the floating-point decimal 1.0. In Python some important data types include - Name\tSymbolNone\tNone Integer\tint Float\tfloat String\tstr Boolean\tbool List\tlist Dictionary\tdict Set\tset None - In Python, None is used to describe something that has no value. It is denoted via the symbol None. Integer - An integer is a whole number, meaning without a fractional part. In Python an integer literal is denoted using numeric characters 0 - 9and signs +, -. Float - A float or floating-point number is a fractional number. In Python a float literal is denoted using numeric characters 0 - 9, signs -, +, and a decimal point . String - A string is a sequence of characters or text symbols. In Python a string literal is denoted using single ' or double &quot; quotes. Boolean - A boolean is a special data type that can be either True or False. List - A list is a sequence of elements. In some languages a list is referred to as an array. In Python, a list literal is denoted using square brackets [ ] and commas ,. # a list of strings myList = [ &quot;Apple&quot;, &quot;Banana&quot;, &quot;Coconut&quot;, &quot;Apple&quot; ] print(myList) # [ &quot;Apple&quot;, &quot;Banana&quot;, &quot;Coconut&quot;, &quot;Apple&quot; ] # a list of integers myList = [ 1, 2, 2, 3, 3, 3 ] print(myList) # [ 1, 2, 2, 3, 3, 3 ] Set - A set is a list that contains no duplicates. In Python, a set literal is denoted using curly braces { } and commas ,. # a set of strings mySet = { &quot;Apple&quot;, &quot;Banana&quot;, &quot;Coconut&quot;, &quot;Apple&quot; } print(mySet) # { &quot;Apple&quot;, &quot;Banana&quot;, &quot;Coconut&quot; } # a set of integers mySet = { 1, 2, 2, 3, 3, 3 } print(mySet) # { 1, 2, 3 } ","keywords":"","version":"Next"},{"title":"Functions","type":0,"sectionRef":"#","url":"/docs/Resources/Python/Functions","content":"Functions Function - A function is a reusable block of code with inputs called parameters and an output called a return. In Python a function is defined using the keyword def, followed by its name and parameters in parentheses. A function is called by referencing its name followed by arguments in parentheses. # define the function named &quot;hello&quot; with the parameters &quot;name&quot; and &quot;age&quot; def hello(name, age): # this function returns a string return &quot;Hello, my name is &quot; + name + &quot;, and I am &quot; + str(age) + &quot;years old!&quot; # call the function named &quot;hello&quot; with the arguments &quot;Gandalf&quot; and &quot;24000&quot; # call the function named &quot;print&quot; using the output from &quot;hello&quot; as an argument print( hello(&quot;Gandalf&quot;, 24000) ) ","keywords":"","version":"Next"},{"title":"Control Flow","type":0,"sectionRef":"#","url":"/docs/Resources/Python/Control Flow","content":"","keywords":"","version":"Next"},{"title":"Branching​","type":1,"pageTitle":"Control Flow","url":"/docs/Resources/Python/Control Flow#branching","content":" ","version":"Next","tagName":"h3"},{"title":"if​","type":1,"pageTitle":"Control Flow","url":"/docs/Resources/Python/Control Flow#if","content":" The if keyword indicates a block of code should run when its condition is met.  An example if statement might look like -  if number &lt; 0: print(&quot;Number is less than zero!&quot;)   ","version":"Next","tagName":"h3"},{"title":"else​","type":1,"pageTitle":"Control Flow","url":"/docs/Resources/Python/Control Flow#else","content":" The else keyword indicates a block of code should run when the condition above it fails. The else keyword must always follow an if statement or an elif statement.  An example if, else chain might look like -  if number == 7: print(&quot;Number is Seven!&quot;) else: print(&quot;Number is NOT Seven!&quot;)   ","version":"Next","tagName":"h3"},{"title":"elif​","type":1,"pageTitle":"Control Flow","url":"/docs/Resources/Python/Control Flow#elif","content":" The elif keyword indicates a block of code should run when the condition above it fails AND its condition is met. The elif keyword must follow an if statement or an elif statement.  An example if, elif, else chain might look like -  if number &lt; 0: print(&quot;Number is negative!&quot;) elif number &gt; 0: print(&quot;Number is positive!&quot;) else: print(&quot;Number is zero!&quot;)   ","version":"Next","tagName":"h3"},{"title":"Looping​","type":1,"pageTitle":"Control Flow","url":"/docs/Resources/Python/Control Flow#looping","content":" A loop is a block of code that is run repeatedly (none or more times).  ","version":"Next","tagName":"h3"},{"title":"while​","type":1,"pageTitle":"Control Flow","url":"/docs/Resources/Python/Control Flow#while","content":" The while keyword indicates a block of code should run repeatedly until a condition is met.  An example while loop might look like -  number = 0 while number &lt; 10: print(&quot;I love Robotics!&quot;) number = number + 1   ","version":"Next","tagName":"h3"},{"title":"for ... in​","type":1,"pageTitle":"Control Flow","url":"/docs/Resources/Python/Control Flow#for--in","content":" The for ... in keywords are used to iterate over an iterable. An iterable is something that can be consumed one element at a time. Think of an iterable like a deck of cards, where each element is a card. When you iterate over a deck of cards, you consume one card at a time by drawing it.  A for ... in statement requires a variable and an iterable. Each iteration will consume one element from the iterable set and assign it to the variable. An example of a for ... in loop might look like -  # the range() function generates an iterable range we can iterate over # each element in our range is assigned to the variable 'n' # this program will count from 0 to 9 for n in range(10): print(n)  ","version":"Next","tagName":"h3"},{"title":"Standard Input / Output","type":0,"sectionRef":"#","url":"/docs/Resources/Python/Standard Input & Output","content":"","keywords":"","version":"Next"},{"title":"print()​","type":1,"pageTitle":"Standard Input / Output","url":"/docs/Resources/Python/Standard Input & Output#print","content":" Standard output refers to the command-line output of a program. In Python, a program can write to the standard output using the built-in print() function.  print(&quot;Hello World&quot;) # write the string &quot;Hello World&quot; to the standard output   ","version":"Next","tagName":"h3"},{"title":"input()​","type":1,"pageTitle":"Standard Input / Output","url":"/docs/Resources/Python/Standard Input & Output#input","content":" Standard input refers to the command-line input of a program. In Python, a program can read from the standard input using the built-in input() function.  name = input(&quot;What is your name? &quot;) # read a string from the standard input and assign it to the variable &quot;name&quot;   A Note on Standard Input in Python In Python, the input() function will always return a string. Be cognizant of this when trying to perform operations like arithmetic where the strings must be first parsed into a numeric type. ","version":"Next","tagName":"h3"},{"title":"Operators","type":0,"sectionRef":"#","url":"/docs/Resources/Python/Operators","content":"","keywords":"","version":"Next"},{"title":"Assignment Operator​","type":1,"pageTitle":"Operators","url":"/docs/Resources/Python/Operators#assignment-operator","content":" Name\tSymbol\tDescriptionAssignment\t=\tAssigns a value or the result of an expression to a variable.  ","version":"Next","tagName":"h3"},{"title":"Arithmetic Operators​","type":1,"pageTitle":"Operators","url":"/docs/Resources/Python/Operators#arithmetic-operators","content":" Unary Arithmetic Operators  Name\tSymbol\tSignature\tDescriptionPositive\t+\t+ a\tReturns a numeric type with the sign unchanged. Negative\t-\t- a\tReturns a numeric type with the sign inverted.  Binary Arithmetic Operators  Name\tSymbol\tSignature\tDescriptionAddition\t+\ta + b\tReturns the sum of two numeric types. Subtraction\t-\ta - b\tReturns the difference of two numeric types. Multiplication\t*\ta * b\tReturns the product of two numeric types. Exponentiation\t**\ta ** b\tReturns the power of two numeric types. Division\t/\ta / b\tReturns the quotient of two numeric types. Floor Division\t//\ta // b\tReturns the integer quotient of two numeric types. Remainder\t%\ta % b\tReturns the integer remainder of two numeric types.  ","version":"Next","tagName":"h3"},{"title":"Comparison Operators​","type":1,"pageTitle":"Operators","url":"/docs/Resources/Python/Operators#comparison-operators","content":" Name\tSymbol\tDescriptionEqual To\t==\tReturns True if two values are equal. Returns False otherwise. Not Equal To\t!=\tReturns True if two values are NOT equal. Returns False otherwise. Less Than\t&lt;\tReturns True if the left value is less than the right value. Returns False otherwise. Less Than OR Equal To\t&lt;=\tReturns True if the left value is less than or equal to the right value. Returns False otherwise. Greater Than\t&gt;\tReturns True if the left value is greater than the right value. Returns False otherwise. Greater Than OR Equal To\t&gt;=\tReturns True if the left value is greater than or equal to the right value. Returns False otherwise.  A Note on Assignment and Equality A common pitfall when checking for equality == is to accidentally use assignment =. In most cases this will be interpreted without an error, but will result in undefined or unexpected behavior. Boolean Operators  Boolean operators are used to join boolean expressions and values.  Name\tSymbol\tSignature\tDescriptionBoolean NOT\tnot\tnot a\tUnary boolean operator. Returns True if the right value is False, returns False otherwise. Boolean AND\tand\ta and b\tReturns True if both the left and right values are True, returns False otherwise. Boolean OR\tor\ta or b\tReturns True if either left or right value is True, returns False otherwise. ","version":"Next","tagName":"h3"},{"title":"Truth Tables","type":0,"sectionRef":"#","url":"/docs/Resources/Python/Truth Tables","content":"Truth Tables NOT - Returns True if the input is False otherwise returns False. NOT\tTrue\tFalse\tFalse\tTrue AND - Returns True iff both inputs are True, otherwise returns False. AND\tTrue\tFalseTrue\tTrue\tFalse False\tFalse\tFalse OR - Returns True if either input is True, otherwise returns False. OR\tTrue\tFalseTrue\tTrue\tTrue False\tTrue\tFalse XOR - Stands for exclusive or. Returns True iff both inputs are different, otherwise returns False. XOR\tTrue\tFalseTrue\tFalse\tTrue False\tTrue\tFalse NAND - Stands for not and. Returns True if either input is False, otherwise returns False. NAND\tTrue\tFalseTrue\tFalse\tTrue False\tTrue\tTrue NOR - Stands for not or. Returns True iff both inputs are False, otherwise returns False NOR\tTrue\tFalseTrue\tFalse\tFalse False\tFalse\tTrue XNOR - Stands for exclusive nor. Returns True iff both input are the same, otherwise returns False. XNOR\tTrue\tFalseTrue\tTrue\tFalse False\tFalse\tTrue","keywords":"","version":"Next"},{"title":"Robotics & Mechatronics I","type":0,"sectionRef":"#","url":"/docs/Robotics & Mechatronics I/Syllabus","content":"Robotics &amp; Mechatronics I Computer Science Foundations This Course is Under Construction!","keywords":"","version":"Next"},{"title":"Robotics & Mechatronics II","type":0,"sectionRef":"#","url":"/docs/Robotics & Mechatronics II/Syllabus","content":"Robotics &amp; Mechatronics II Robotics &amp; Automated Systems This Course is Under Construction!","keywords":"","version":"Next"},{"title":"Robotics & Mechatronics IV","type":0,"sectionRef":"#","url":"/docs/Robotics & Mechatronics IV/Syllabus","content":"Robotics &amp; Mechatronics IV Robotics &amp; Mechatronics Technology This Course is Under Construction!","keywords":"","version":"Next"},{"title":"Robotics & Mechatronics III","type":0,"sectionRef":"#","url":"/docs/Robotics & Mechatronics III/Syllabus","content":"Robotics &amp; Mechatronics III DC/AC Electronics, Digital Electronics This Course is Under Construction!","keywords":"","version":"Next"},{"title":"Syllabus","type":0,"sectionRef":"#","url":"/docs/Robotics & Mechatronics Pre-Introduction/Syllabus","content":"Syllabus This Course is Under Construction!","keywords":"","version":"Next"},{"title":"Variables","type":0,"sectionRef":"#","url":"/docs/Resources/Python/Variables","content":"Variables Variables are how you store and access data in a program. In Python, a variable always has a name, a type, and a value. It is useful to think of a variable as a box that stores a thing. A value is what is stored in the box, a type describes what is stored in the box, and a name is a unique way of identifying the box. In Python a variable can be assigned via the assignment operator =, which looks like - a = 0 # The variable named &quot;a&quot; is assigned to the integer value &quot;0&quot; b = 0.0 # The variable named &quot;b&quot; is assigned to the floating point value &quot;0.0&quot; c = False # The variable named &quot;c&quot; is assigned to the boolean value &quot;False&quot; d = &quot;Zero&quot; # The variable named &quot;d&quot; is assigned to the string value &quot;Zero&quot; ","keywords":"","version":"Next"}],"options":{"id":"default"}}