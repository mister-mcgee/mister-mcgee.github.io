"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5742],{1516:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>f,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var n=i(4848),t=i(8453);const o={},r=void 0,d={id:"Definitions/Memory Address",title:"Memory Address",description:"Memory Address - A memory address is a binary number (usually 32 bits wide or 64 bits wide), which describes the physical location of a chunk in memory. It is less efficient to address individual bits so a computer's memory is broken into chunks called bytes where each byte has its own address.",source:"@site/docs/Definitions/Memory Address.md",sourceDirName:"Definitions",slug:"/Definitions/Memory Address",permalink:"/docs/Definitions/Memory Address",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"definitions",previous:{title:"Hexadecimal",permalink:"/docs/Definitions/Hexadecimal"},next:{title:"Memory",permalink:"/docs/Definitions/Memory"}},c={},a=[];function l(e){const s={a:"a",p:"p",strong:"strong",...(0,t.R)(),...e.components};return(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Memory Address"})," - A memory address is a ",(0,n.jsx)(s.a,{href:"/docs/Definitions/Binary",children:"binary"})," number (usually 32 ",(0,n.jsx)(s.a,{href:"/docs/Definitions/Bit",children:"bits"})," wide or 64 ",(0,n.jsx)(s.a,{href:"/docs/Definitions/Bit",children:"bits"})," wide), which describes the physical location of a chunk in ",(0,n.jsx)(s.a,{href:"/docs/Definitions/Memory",children:"memory"}),". It is less efficient to address individual ",(0,n.jsx)(s.a,{href:"/docs/Definitions/Bit",children:"bits"})," so a computer's ",(0,n.jsx)(s.a,{href:"/docs/Definitions/Memory",children:"memory"})," is broken into chunks called ",(0,n.jsx)(s.a,{href:"/docs/Definitions/Byte",children:"bytes"})," where each ",(0,n.jsx)(s.a,{href:"/docs/Definitions/Byte",children:"byte"})," has its own address."]})}function f(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,s,i)=>{i.d(s,{R:()=>r,x:()=>d});var n=i(6540);const t={},o=n.createContext(t);function r(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);