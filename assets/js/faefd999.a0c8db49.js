"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2446],{4858:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var t=s(4848),r=s(8453);const i={},c="Data Types",d={id:"Resources/Python/Data Types",title:"Data Types",description:"In a modern computer all data exists as a simple binary sequence which is meaningless without context. This is why data types are useful.",source:"@site/docs/Resources/Python/Data Types.md",sourceDirName:"Resources/Python",slug:"/Resources/Python/Data Types",permalink:"/docs/Resources/Python/Data Types",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"resources",previous:{title:"Control Flow",permalink:"/docs/Resources/Python/Control Flow"},next:{title:"Functions",permalink:"/docs/Resources/Python/Functions"}},o={},a=[];function l(e){const n={code:"code",em:"em",h1:"h1",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"data-types",children:"Data Types"}),"\n",(0,t.jsxs)(n.p,{children:["In a modern computer all data exists as a simple ",(0,t.jsx)(n.strong,{children:"binary"})," sequence which is meaningless without context. This is why data types are useful."]}),"\n",(0,t.jsxs)(n.p,{children:["Data types describe how certain data should be handled by your program. Different values can have the same binary representation yet mean different things depending on their data type. A good example of this is the 32-bit hexadecimal value ",(0,t.jsx)(n.code,{children:"0x3f800000"})," which represents the integer ",(0,t.jsx)(n.code,{children:"1065353216"}),", meanwhile that same value represents the floating-point decimal ",(0,t.jsx)(n.code,{children:"1.0"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"In Python some important data types include -"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Symbol"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"None"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"None"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Integer"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"int"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Float"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"float"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"str"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Boolean"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"bool"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"List"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"list"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Dictionary"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dict"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Set"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"set"})})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"None"})," - In Python, ",(0,t.jsx)(n.code,{children:"None"})," is used to describe something that has no value. It is denoted via the symbol ",(0,t.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Integer"})," - An integer is a whole number, meaning without a fractional part. In Python an ",(0,t.jsx)(n.em,{children:"integer literal"})," is denoted using numeric characters ",(0,t.jsx)(n.code,{children:"0 - 9"}),"and signs ",(0,t.jsx)(n.code,{children:"+, -"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Float"})," - A float or ",(0,t.jsx)(n.em,{children:"floating-point number"})," is a fractional number. In Python a ",(0,t.jsx)(n.em,{children:"float literal"})," is denoted using numeric characters ",(0,t.jsx)(n.code,{children:"0 - 9"}),", signs ",(0,t.jsx)(n.code,{children:"-, +"}),", and a decimal point ",(0,t.jsx)(n.code,{children:"."})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"String"})," - A string is a sequence of ",(0,t.jsx)(n.strong,{children:"characters"})," or text symbols. In Python a ",(0,t.jsx)(n.em,{children:"string literal"})," is denoted using single ",(0,t.jsx)(n.code,{children:"'"})," or double ",(0,t.jsx)(n.code,{children:'"'})," quotes."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Boolean"})," - A boolean is a special data type that can be either ",(0,t.jsx)(n.code,{children:"True"})," or ",(0,t.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"List"})," - A list is a sequence of elements. In some languages a list is referred to as an array. In Python, a ",(0,t.jsx)(n.em,{children:"list literal"})," is denoted using square brackets ",(0,t.jsx)(n.code,{children:"[ ]"})," and commas ",(0,t.jsx)(n.code,{children:","}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'# a list of strings\nmyList = [ "Apple", "Banana", "Coconut", "Apple" ]\nprint(myList) # [ "Apple", "Banana", "Coconut", "Apple" ]\n\n# a list of integers\nmyList = [ 1, 2, 2, 3, 3, 3 ]\nprint(myList) # [ 1, 2, 2, 3, 3, 3 ]\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Set"})," - A set is a ",(0,t.jsx)(n.strong,{children:"list"})," that contains no duplicates. In Python, a ",(0,t.jsx)(n.em,{children:"set literal"})," is denoted using curly braces ",(0,t.jsx)(n.code,{children:"{ }"})," and commas ",(0,t.jsx)(n.code,{children:","}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'# a set of strings\nmySet = { "Apple", "Banana", "Coconut", "Apple" }\nprint(mySet) # { "Apple", "Banana", "Coconut" }\n\n# a set of integers\nmySet = { 1, 2, 2, 3, 3, 3 }\nprint(mySet) # { 1, 2, 3 }\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var t=s(6540);const r={},i=t.createContext(r);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);