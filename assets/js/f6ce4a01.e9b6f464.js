"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1523],{448:(s,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>y,frontMatter:()=>n,metadata:()=>a,toc:()=>c});var o=r(4848),t=r(8453);const n={},i=void 0,a={id:"Glossary/Memory Address",title:"Memory Address",description:"Memory Address - A memory address is a binary number (usually 32 bits wide or 64 bits wide), which describes the physical location of a chunk in memory. It is less efficient to address individual bits so a computer's memory is broken into chunks called bytes where each byte has its own address.",source:"@site/docs/Glossary/Memory Address.md",sourceDirName:"Glossary",slug:"/Glossary/Memory Address",permalink:"/docs/Glossary/Memory Address",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"glossary",previous:{title:"Hexadecimal",permalink:"/docs/Glossary/Hexadecimal"},next:{title:"Memory",permalink:"/docs/Glossary/Memory"}},d={},c=[];function l(s){const e={a:"a",p:"p",strong:"strong",...(0,t.R)(),...s.components};return(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Memory Address"})," - A memory address is a ",(0,o.jsx)(e.a,{href:"/docs/Glossary/Binary",children:"binary"})," number (usually 32 ",(0,o.jsx)(e.a,{href:"/docs/Glossary/Bit",children:"bits"})," wide or 64 ",(0,o.jsx)(e.a,{href:"/docs/Glossary/Bit",children:"bits"})," wide), which describes the physical location of a chunk in ",(0,o.jsx)(e.a,{href:"/docs/Glossary/Memory",children:"memory"}),". It is less efficient to address individual ",(0,o.jsx)(e.a,{href:"/docs/Glossary/Bit",children:"bits"})," so a computer's ",(0,o.jsx)(e.a,{href:"/docs/Glossary/Memory",children:"memory"})," is broken into chunks called ",(0,o.jsx)(e.a,{href:"/docs/Glossary/Byte",children:"bytes"})," where each ",(0,o.jsx)(e.a,{href:"/docs/Glossary/Byte",children:"byte"})," has its own address."]})}function y(s={}){const{wrapper:e}={...(0,t.R)(),...s.components};return e?(0,o.jsx)(e,{...s,children:(0,o.jsx)(l,{...s})}):l(s)}},8453:(s,e,r)=>{r.d(e,{R:()=>i,x:()=>a});var o=r(6540);const t={},n=o.createContext(t);function i(s){const e=o.useContext(n);return o.useMemo((function(){return"function"==typeof s?s(e):{...e,...s}}),[e,s])}function a(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(t):s.components||t:i(s.components),o.createElement(n.Provider,{value:e},s.children)}}}]);